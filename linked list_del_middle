class node {
  public:
  int data ; 
  node*next ;
  node(int d) {
    data = d ;
    next = NULL ;
  }
};

void starting(node*&head , int data) {
  node*n = new node(data) ;
  n->next = head;
  head = n ;
}

void delete_starting(node*&head) {
  if(head == NULL)
    return ;
  
  node*temp = head;
  head = head->next;
  delete temp;
  return ;
}

void print(node*head) {
  node*temp = head ;
  while(temp != NULL) {
    std::cout <<temp->data<<" " ;
    temp = temp->next ;
  }
}

void deleting_tail(node*&head) {
  node*previous = NULL;
  node*temp = head;
  while(temp -> next != NULL) {
    previous = head ;
    temp = temp->next ;
  }
  delete temp ; 
  previous -> next = NULL ;
}

void delete_middle(node*&head, int position) {
  node*temp = head;
  node*previous = NULL;
  node*after = NULL ;
  int j = 1;
  while(j <= position - 1) {
    previous = temp ; 
    temp = temp -> next ; 
    after = temp->next ;
    j++ ;
  }
  delete temp ;
  previous->next = after  ;
}
int main() {
  node*head  = NULL ;
  starting(head , 10) ;
  starting(head , 20) ;
  starting(head , 30) ;
  starting(head , 40) ;
  starting(head , 50) ;
  //delete_starting(head);
  //deleting_tail(head);
  delete_middle(head , 2 ) ;
  print(head) ;
  
  return 0 ;
}
